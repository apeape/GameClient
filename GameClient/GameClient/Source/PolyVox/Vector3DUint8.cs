/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace PolyVoxCore {

using System;
using System.Runtime.InteropServices;

public class Vector3DUint8 : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vector3DUint8(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Vector3DUint8 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vector3DUint8() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCorePINVOKE.delete_Vector3DUint8(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Vector3DUint8(byte x, byte y) : this(PolyVoxCorePINVOKE.new_Vector3DUint8__SWIG_0(x, y), true) {
  }

  public Vector3DUint8(byte x, byte y, byte z) : this(PolyVoxCorePINVOKE.new_Vector3DUint8__SWIG_1(x, y, z), true) {
  }

  public Vector3DUint8(byte x, byte y, byte z, byte w) : this(PolyVoxCorePINVOKE.new_Vector3DUint8__SWIG_2(x, y, z, w), true) {
  }

  public Vector3DUint8() : this(PolyVoxCorePINVOKE.new_Vector3DUint8__SWIG_3(), true) {
  }

  public Vector3DUint8(Vector3DUint8 vector) : this(PolyVoxCorePINVOKE.new_Vector3DUint8__SWIG_4(Vector3DUint8.getCPtr(vector)), true) {
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3DUint8 Assignment(Vector3DUint8 rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCorePINVOKE.Vector3DUint8_Assignment(swigCPtr, Vector3DUint8.getCPtr(rhs)), false);
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equals(Vector3DUint8 rhs) {
    bool ret = PolyVoxCorePINVOKE.Vector3DUint8_equals(swigCPtr, Vector3DUint8.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool lessThan(Vector3DUint8 rhs) {
    bool ret = PolyVoxCorePINVOKE.Vector3DUint8_lessThan(swigCPtr, Vector3DUint8.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3DUint8 additionAssignment(Vector3DUint8 rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCorePINVOKE.Vector3DUint8_additionAssignment(swigCPtr, Vector3DUint8.getCPtr(rhs)), false);
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3DUint8 subtractionAssignment(Vector3DUint8 rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCorePINVOKE.Vector3DUint8_subtractionAssignment(swigCPtr, Vector3DUint8.getCPtr(rhs)), false);
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3DUint8 multiplicationAssignment(byte rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCorePINVOKE.Vector3DUint8_multiplicationAssignment(swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DUint8 divisionAssignment(byte rhs) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCorePINVOKE.Vector3DUint8_divisionAssignment(swigCPtr, rhs), false);
    return ret;
  }

  public byte getElement(uint index) {
    byte ret = PolyVoxCorePINVOKE.Vector3DUint8_getElement(swigCPtr, index);
    return ret;
  }

  public byte getX() {
    byte ret = PolyVoxCorePINVOKE.Vector3DUint8_getX(swigCPtr);
    return ret;
  }

  public byte getY() {
    byte ret = PolyVoxCorePINVOKE.Vector3DUint8_getY(swigCPtr);
    return ret;
  }

  public byte getZ() {
    byte ret = PolyVoxCorePINVOKE.Vector3DUint8_getZ(swigCPtr);
    return ret;
  }

  public byte getW() {
    byte ret = PolyVoxCorePINVOKE.Vector3DUint8_getW(swigCPtr);
    return ret;
  }

  public void setElement(uint index, byte tValue) {
    PolyVoxCorePINVOKE.Vector3DUint8_setElement(swigCPtr, index, tValue);
  }

  public void setElements(byte x, byte y) {
    PolyVoxCorePINVOKE.Vector3DUint8_setElements__SWIG_0(swigCPtr, x, y);
  }

  public void setElements(byte x, byte y, byte z) {
    PolyVoxCorePINVOKE.Vector3DUint8_setElements__SWIG_1(swigCPtr, x, y, z);
  }

  public void setElements(byte x, byte y, byte z, byte w) {
    PolyVoxCorePINVOKE.Vector3DUint8_setElements__SWIG_2(swigCPtr, x, y, z, w);
  }

  public void setX(byte tX) {
    PolyVoxCorePINVOKE.Vector3DUint8_setX(swigCPtr, tX);
  }

  public void setY(byte tY) {
    PolyVoxCorePINVOKE.Vector3DUint8_setY(swigCPtr, tY);
  }

  public void setZ(byte tZ) {
    PolyVoxCorePINVOKE.Vector3DUint8_setZ(swigCPtr, tZ);
  }

  public void setW(byte tW) {
    PolyVoxCorePINVOKE.Vector3DUint8_setW(swigCPtr, tW);
  }

  public double length() {
    double ret = PolyVoxCorePINVOKE.Vector3DUint8_length(swigCPtr);
    return ret;
  }

  public double lengthSquared() {
    double ret = PolyVoxCorePINVOKE.Vector3DUint8_lengthSquared(swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DUint8 vector) {
    double ret = PolyVoxCorePINVOKE.Vector3DUint8_angleTo(swigCPtr, Vector3DUint8.getCPtr(vector));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3DUint8 cross(Vector3DUint8 vector) {
    Vector3DUint8 ret = new Vector3DUint8(PolyVoxCorePINVOKE.Vector3DUint8_cross(swigCPtr, Vector3DUint8.getCPtr(vector)), true);
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte dot(Vector3DUint8 rhs) {
    byte ret = PolyVoxCorePINVOKE.Vector3DUint8_dot(swigCPtr, Vector3DUint8.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCorePINVOKE.Vector3DUint8_normalise(swigCPtr);
  }

}

}
