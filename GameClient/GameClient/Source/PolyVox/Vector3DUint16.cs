/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace PolyVoxCore {

using System;
using System.Runtime.InteropServices;

public class Vector3DUint16 : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vector3DUint16(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Vector3DUint16 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vector3DUint16() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCorePINVOKE.delete_Vector3DUint16(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Vector3DUint16(ushort x, ushort y) : this(PolyVoxCorePINVOKE.new_Vector3DUint16__SWIG_0(x, y), true) {
  }

  public Vector3DUint16(ushort x, ushort y, ushort z) : this(PolyVoxCorePINVOKE.new_Vector3DUint16__SWIG_1(x, y, z), true) {
  }

  public Vector3DUint16(ushort x, ushort y, ushort z, ushort w) : this(PolyVoxCorePINVOKE.new_Vector3DUint16__SWIG_2(x, y, z, w), true) {
  }

  public Vector3DUint16() : this(PolyVoxCorePINVOKE.new_Vector3DUint16__SWIG_3(), true) {
  }

  public Vector3DUint16(Vector3DUint16 vector) : this(PolyVoxCorePINVOKE.new_Vector3DUint16__SWIG_4(Vector3DUint16.getCPtr(vector)), true) {
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3DUint16 Assignment(Vector3DUint16 rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCorePINVOKE.Vector3DUint16_Assignment(swigCPtr, Vector3DUint16.getCPtr(rhs)), false);
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equals(Vector3DUint16 rhs) {
    bool ret = PolyVoxCorePINVOKE.Vector3DUint16_equals(swigCPtr, Vector3DUint16.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool lessThan(Vector3DUint16 rhs) {
    bool ret = PolyVoxCorePINVOKE.Vector3DUint16_lessThan(swigCPtr, Vector3DUint16.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3DUint16 additionAssignment(Vector3DUint16 rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCorePINVOKE.Vector3DUint16_additionAssignment(swigCPtr, Vector3DUint16.getCPtr(rhs)), false);
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3DUint16 subtractionAssignment(Vector3DUint16 rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCorePINVOKE.Vector3DUint16_subtractionAssignment(swigCPtr, Vector3DUint16.getCPtr(rhs)), false);
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3DUint16 multiplicationAssignment(ushort rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCorePINVOKE.Vector3DUint16_multiplicationAssignment(swigCPtr, rhs), false);
    return ret;
  }

  public Vector3DUint16 divisionAssignment(ushort rhs) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCorePINVOKE.Vector3DUint16_divisionAssignment(swigCPtr, rhs), false);
    return ret;
  }

  public ushort getElement(uint index) {
    ushort ret = PolyVoxCorePINVOKE.Vector3DUint16_getElement(swigCPtr, index);
    return ret;
  }

  public ushort getX() {
    ushort ret = PolyVoxCorePINVOKE.Vector3DUint16_getX(swigCPtr);
    return ret;
  }

  public ushort getY() {
    ushort ret = PolyVoxCorePINVOKE.Vector3DUint16_getY(swigCPtr);
    return ret;
  }

  public ushort getZ() {
    ushort ret = PolyVoxCorePINVOKE.Vector3DUint16_getZ(swigCPtr);
    return ret;
  }

  public ushort getW() {
    ushort ret = PolyVoxCorePINVOKE.Vector3DUint16_getW(swigCPtr);
    return ret;
  }

  public void setElement(uint index, ushort tValue) {
    PolyVoxCorePINVOKE.Vector3DUint16_setElement(swigCPtr, index, tValue);
  }

  public void setElements(ushort x, ushort y) {
    PolyVoxCorePINVOKE.Vector3DUint16_setElements__SWIG_0(swigCPtr, x, y);
  }

  public void setElements(ushort x, ushort y, ushort z) {
    PolyVoxCorePINVOKE.Vector3DUint16_setElements__SWIG_1(swigCPtr, x, y, z);
  }

  public void setElements(ushort x, ushort y, ushort z, ushort w) {
    PolyVoxCorePINVOKE.Vector3DUint16_setElements__SWIG_2(swigCPtr, x, y, z, w);
  }

  public void setX(ushort tX) {
    PolyVoxCorePINVOKE.Vector3DUint16_setX(swigCPtr, tX);
  }

  public void setY(ushort tY) {
    PolyVoxCorePINVOKE.Vector3DUint16_setY(swigCPtr, tY);
  }

  public void setZ(ushort tZ) {
    PolyVoxCorePINVOKE.Vector3DUint16_setZ(swigCPtr, tZ);
  }

  public void setW(ushort tW) {
    PolyVoxCorePINVOKE.Vector3DUint16_setW(swigCPtr, tW);
  }

  public double length() {
    double ret = PolyVoxCorePINVOKE.Vector3DUint16_length(swigCPtr);
    return ret;
  }

  public double lengthSquared() {
    double ret = PolyVoxCorePINVOKE.Vector3DUint16_lengthSquared(swigCPtr);
    return ret;
  }

  public double angleTo(Vector3DUint16 vector) {
    double ret = PolyVoxCorePINVOKE.Vector3DUint16_angleTo(swigCPtr, Vector3DUint16.getCPtr(vector));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3DUint16 cross(Vector3DUint16 vector) {
    Vector3DUint16 ret = new Vector3DUint16(PolyVoxCorePINVOKE.Vector3DUint16_cross(swigCPtr, Vector3DUint16.getCPtr(vector)), true);
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort dot(Vector3DUint16 rhs) {
    ushort ret = PolyVoxCorePINVOKE.Vector3DUint16_dot(swigCPtr, Vector3DUint16.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void normalise() {
    PolyVoxCorePINVOKE.Vector3DUint16_normalise(swigCPtr);
  }

}

}
