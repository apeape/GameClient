/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace PolyVoxCore {

using System;
using System.Runtime.InteropServices;

public class Material8 : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Material8(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Material8 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Material8() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PolyVoxCorePINVOKE.delete_Material8(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Material8() : this(PolyVoxCorePINVOKE.new_Material8__SWIG_0(), true) {
  }

  public Material8(byte uMaterial) : this(PolyVoxCorePINVOKE.new_Material8__SWIG_1(uMaterial), true) {
  }

  public bool equals(Material8 rhs) {
    bool ret = PolyVoxCorePINVOKE.Material8_equals(swigCPtr, Material8.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool notEqualTo(Material8 rhs) {
    bool ret = PolyVoxCorePINVOKE.Material8_notEqualTo(swigCPtr, Material8.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool lessThan(Material8 rhs) {
    bool ret = PolyVoxCorePINVOKE.Material8_lessThan(swigCPtr, Material8.getCPtr(rhs));
    if (PolyVoxCorePINVOKE.SWIGPendingException.Pending) throw PolyVoxCorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getDensity() {
    byte ret = PolyVoxCorePINVOKE.Material8_getDensity(swigCPtr);
    return ret;
  }

  public byte getMaterial() {
    byte ret = PolyVoxCorePINVOKE.Material8_getMaterial(swigCPtr);
    return ret;
  }

  public void setDensity(byte arg0) {
    PolyVoxCorePINVOKE.Material8_setDensity(swigCPtr, arg0);
  }

  public void setMaterial(byte uMaterial) {
    PolyVoxCorePINVOKE.Material8_setMaterial(swigCPtr, uMaterial);
  }

  public static byte getMaxDensity() {
    byte ret = PolyVoxCorePINVOKE.Material8_getMaxDensity();
    return ret;
  }

  public static byte getMinDensity() {
    byte ret = PolyVoxCorePINVOKE.Material8_getMinDensity();
    return ret;
  }

  public static byte getThreshold() {
    byte ret = PolyVoxCorePINVOKE.Material8_getThreshold();
    return ret;
  }

}

}
