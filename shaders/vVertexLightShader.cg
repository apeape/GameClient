/*-----------------------------------------------------------------------

 Ethanon Engine (C) Copyright 2009-2010 André Santee
 http://www.asantee.net/ethanon/

  ENGLISH
  -------

    This file is part of Ethanon Engine.

    Ethanon Engine is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    Ethanon Engine is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Ethanon Engine. If not, see
    <http://www.gnu.org/licenses/>.

  PORTUGUÊS
  ---------

    Este arquivo é parte da Ethanon Engine.

    Ethanon Engine é software livre; você pode redistribuí-lo e/ou
    modificá-lo sob os termos da Licença Pública Menos Geral (LGPL)
    GNU, conforme publicada pela Free Software Foundation; tanto a
    versão 3 da Licença como (a seu critério) qualquer versão mais
    nova.

    Ethanon Engine é distribuído na expectativa de ser útil, mas
    SEM QUALQUER GARANTIA; sem mesmo a garantia implícita de
    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
    PARTICULAR. Consulte a Licença Pública Geral Menor (LGPL) GNU
    para obter mais detalhes.

    Você deve ter recebido uma cópia da Licença Pública Menos Geral
    GNU junto com este programa; se não, veja na página
    <http://www.gnu.org/licenses/>.

-----------------------------------------------------------------------*/


// sprite and screen properties
uniform float4x4 viewMatrix;
uniform float4x4 rotationMatrix;
uniform float2 screenSize;
uniform float2 size;
uniform float2 entityPos;
uniform float2 center;
uniform float2 bitmapSize;
uniform float2 rectPos;
uniform float2 rectSize;
uniform float2 scroll;
uniform float2 multiply;
uniform float4 color0;
uniform float4 color1;
uniform float4 color2;
uniform float4 color3;
uniform float2 flipAdd;
uniform float2 flipMul;
uniform float2 cameraPos;
uniform float depth;
uniform float lightIntensity;

uniform float3 pivotAdjust;
uniform float3 lightPos;
uniform float lightRange;
uniform float4 lightColor;

struct SPRITE_TRANSFORM
{
	float4 position;
	float2 vertPos;
};
SPRITE_TRANSFORM transformSprite(float3 position)
{
	SPRITE_TRANSFORM r;
	float4 newPos = float4(position, 1);
	newPos = newPos * float4(size,1,1) - float4(center, 0, 0);
	newPos = mul(rotationMatrix, newPos)+float4(entityPos,0,0);
	r.vertPos = newPos.xy;
	
	// project the vertex on the screen
	newPos -= float4(screenSize/2,0,0)+float4(cameraPos,0,0);
	newPos.y =-newPos.y;
	r.position = mul(viewMatrix, newPos);
	return r;
}

// returns the texture coordinate according to the rect
float2 transformCoord(float2 texCoord)
{
	float2 newCoord = texCoord * (rectSize/bitmapSize);
	newCoord += (rectPos/bitmapSize);
	return (newCoord+(scroll/bitmapSize))*multiply;
}

// main sprite program (with per-pixel lighting)
void sprite_pvl(float3 position : POSITION,
				float2 texCoord : TEXCOORD0,
				out float4 oPosition : POSITION,
				out float4 oColor    : COLOR0,
				out float2 oTexCoord : TEXCOORD0,
				out float2 oVertPos : TEXCOORD1,
				uniform float3 topLeft3DPos,
				uniform float spaceLength)
{
	SPRITE_TRANSFORM transform = transformSprite(position);
	transform.position.z = (1-depth) - (((1-position.y)*rectSize.y)/spaceLength);;
	oPosition = transform.position;
	oVertPos = transform.vertPos;
	oTexCoord = transformCoord(texCoord);
	
	lightColor.a = 1.0;
	
	float3 vertPos3D = topLeft3DPos + (float3(position.x,0,position.y)*float3(size.x,0,-size.y));
	
	float3 lightVec = vertPos3D-lightPos;
	float squaredDist = dot(lightVec,lightVec);

	float3 normalColor = float3(0.0,-1.0,0.0);
	float diffuseLight = dot(normalize(lightVec), normalColor);
	float squaredRange = lightRange*lightRange;
	squaredRange = max(squaredDist, squaredRange);
	float attenBias = 1-(squaredDist/squaredRange);
	oColor = color0*diffuseLight*attenBias*lightColor*lightIntensity;
}
